# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - master
  paths:
    include:
    - azure-pipelines/*
    - src/*
    exclude:
    - azure-pipelines/README.md

pr: none

pool:
  vmImage: 'windows-2019'

variables:
  BuildPlatform: 'Any CPU'
  BuildConfiguration: 'Release'
  Version.MajorMinor: '1.0'
  Version.Patch: $[counter(variables['Version.MajorMinor'], 0)]
  ${{ if ne(variables['Build.SourceBranchName'], 'master') }}:
    Version.PreRelease: $[format('-{0}', variables['Build.SourceBranchName'])]
  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
    Version.PreRelease: ''

name: $[format('{0}.{1}{2}', variables['Version.MajorMinor'], variables['Version.Patch'], variables['Version.PreRelease'])]

steps:
- task: WaelHamze.xrm-ci-framework-build-tasks.MSCRMToolInstaller.MSCRMToolInstaller@12
  displayName: 'Power DevOps Tool Installer'

- task: PowerShell@2
  displayName: 'Install dependencies for all PCF Components'
  inputs:
    targetType: 'inline'
    script: ls | foreach  { cd $_.FullName | npm i }
    workingDirectory: 'src/Components'

- task: WaelHamze.xrm-ci-framework-build-tasks.MSCRMSetVersion.MSCRMSetVersion@12
  displayName: 'Set PowerApps Solution Version'
  inputs:
    target: xml
    unpackedFilesFolder: src/Solution
    versionNumber: '$(Version.MajorMinor).$(Version.Patch)'

- task: MSBuild@1
  displayName: 'Build solution **/*.cdsproj'
  inputs:
    solution: '**/*.cdsproj'
    configuration: '$(BuildConfiguration)'
    msbuildArguments: /restore

- task: MSBuild@1
  displayName: 'Build solution **/*.sln'
  inputs:
    solution: '**/*.sln'
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'
    msbuildArguments: /restore

- task: VSTest@2
  displayName: 'Test Assemblies'
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: |
      **\*test*.dll
      !**\*TestAdapter.dll
      !**\obj\**
    searchFolder: '$(System.DefaultWorkingDirectory)'
    resultsFolder: '$(Agent.TempDirectory)\test-output'
    testRunTitle: '.NET - xUnit'
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'

- task: CopyFiles@2
  displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
  inputs:
    SourceFolder: '$(system.defaultworkingdirectory)'
    Contents: |
     **\bin\$(BuildConfiguration)\**
     **\bin\ILRepack\**
    TargetFolder: '$(build.artifactstagingdirectory)'

- task: GitHubRelease@1
  displayName: 'Publish Solution to GitHub'
  inputs:
    gitHubConnection: 'opc-buildbot'
    repositoryName: '$(Build.Repository.Name)'
    action: 'create'
    target: '$(Build.SourceVersion)'
    tagSource: 'userSpecifiedTag'
    tag: '$(Build.BuildNumber)'
    assets: '$(Build.ArtifactStagingDirectory)/**/Solution*.zip'
    changeLogCompareToRelease: 'lastFullRelease'
    changeLogType: 'commitBased'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))  

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
